print("Tuplas\n")
tupla_vacia = ()
print("Tupla vacia: ",tupla_vacia)
print(f"El tipo de dato de la tupla es: {type(tupla_vacia)}")
tupla_homogenea = (3,2)
print("Tupla homogénea: ",tupla_homogenea)
print(f"El tipo de dato de la tupla es: {type(tupla_homogenea)}")
tupla_heterogenea = (3,True,"Hola",3.5)
print("Tupla heterogenea: ",tupla_heterogenea)
print(f"El tipo de dato de la tupla es: {type(tupla_heterogenea)}")
tupla_heterogenea1 = ([1,2,3],{"uno":1,"dos":2},(3,2))
print("Tupla heterogenea: ",tupla_heterogenea1)
print(f"El tipo de dato de la tupla es: {type(tupla_heterogenea1)}")
tupla_un_elemento = (5,)
print("Tupla heterogenea de un elemento: ",tupla_un_elemento)
print(f"El tipo de dato de la tupla es: {type(tupla_un_elemento)}")
tupla_sin_parentesis = 3,True,"Hola",3.5
print("Tupla sin paréntesis: ",tupla_sin_parentesis)
print(f"El tipo de dato de la tupla es: {type(tupla_sin_parentesis)}")
tupla = ([1,2,3],{"uno":1,"dos":2},(3,2))
print("Tupla antes de recorrer con indices\n",tupla)
print("Recorrer tupla con indices: ")
for i in tupla:
    print(i)
print("Tupla antes de recorrer con segmentación sin saltos\n",tupla)
print("Recorrer con segmentación tupla sin saltos [0:max]\n",tupla[0:len(tupla)])
print("Recorrer con segmentación tupla sin saltos [0:]\n",tupla[0:])
print("Recorrer con segmentación tupla sin saltos [1:]\n",tupla[1:])
print("Recorrer con segmentación tupla sin saltos [-2:]\n",tupla[-2:])
print("Tupla antes de recorrer con segmentación con saltos\n",tupla)
print("Recorrer con segmentación tupla con saltos [0:max:1]\n",tupla[0:len(tupla):1])
print("Recorrer con segmentación tupla con saltos [0::1]\n",tupla[0::1])
print("Recorrer con segmentación tupla con saltos [0::2]\n",tupla[0::2])
print("Tupla antes de recorrer con desempaquetado\n",tupla)
v1, v2, v3 = tupla
print("\nPosición 0 de la tupla guardado en la variable v1: ",v1)
print("Posición 1 de la tupla guardado en la variable v2: ",v2)
print("Posición 2 de la tupla guardado en la variable v3: ",v3)
print("\nLas tuplas al momento de crearlas no deja agregar o modificar más elementos")
print("Si en la tupla hay listas o diccionarios si deja agregar o modificar valores")
print("Tupla antes de agregar valores a listas o diccionarios\n",tupla)
tupla[0].append(5)
tupla[1]["tres"] = 3
print("Posición 0 de la tupla: ",tupla[0])
print("Posición 1 de la tupla: ",tupla[1])
print("Posición 2 de la tupla: ",tupla[2])
print("Tupla después de agregar valores a listas o diccionarios\n",tupla)
print("Tupla antes de modificar valores a listas o diccionarios\n",tupla)
tupla[0][1] = "modificar lista"
tupla[1]["tres"] = "modificar dic"
print("Posición 0 de la tupla: ",tupla[0])
print("Posición 1 de la tupla: ",tupla[1])
print("Posición 2 de la tupla: ",tupla[2])
print("Tupla después de modificar valores a listas o diccionarios\n",tupla)
tupla = (('Andrés','Neira'),('Mary','Murcia'))
print("Nueva tupla: ",tupla)
k = 1
for i,j in tupla:
    print(f"nombres el tupla registro {k}: {i} {j}")
    k += 1
print("\nTupla a partir de variables con la funcion tuple()")
x = 1
y = "hola"
z = True
print("Variable 'x': ",x)
print("Variable 'y': ",y)
print("Variable 'z': ",z)
print("Tupla: ",tuple([x,y,z]))
print("\nTupla a partir de un texto con la funcion tuple()")
texto = "Andrés Neira"
print("Texto: ",texto)
print("Tupla: ",tuple(texto))
print("\nTupla a partir de una lista con la funcion tuple()")
lista = [1,2,3,4,5]
print("Lista: ",lista)
print("Tupla: ",tuple(lista))
print("\nTupla a partir de los items de un diccionario con la funcion tuple()")
diccionario = {"nombre":"andres","edad":43,"estado":True}
print("Diccionario: ",diccionario)
print("Tupla: ",tuple(diccionario.items()))
print("\nTupla a partir de las claves de un diccionario con la funcion tuple()")
diccionario = {"nombre":"andres","edad":43,"estado":True}
print("Diccionario: ",diccionario)
print("Tupla: ",tuple(diccionario.keys()))
print("\nTupla a partir de los valores de un diccionario con la funcion tuple()")
diccionario = {"nombre":"andres","edad":43,"estado":True}
print("Diccionario: ",diccionario)
print("Tupla: ",tuple(diccionario.values()))
print("\nTupla a partir de dos tuplas con la funcion tuple()")
tupla1 = ([1,2,3],{"uno":1,"dos":2},(3,2))
tupla2 = (False,85,'Hola')
print("Tupla1: ",tupla1)
print("Tupla2: ",tupla2)
print("Tuplas concatenadas: ",tupla1 + tupla2)
print("\nTupla a partir de dos tuplas pero que quede solo en la tupla 1 con la funcion tuple()")
tupla1 = ([1,2,3],{"uno":1,"dos":2},(3,2))
tupla2 = (False,85,'Hola')
print("Tupla1: ",tupla1)
print("Tupla2: ",tupla2)
tupla1 += tupla2
print("Tupla1: ",tupla1)
print("\nTupla a partir de una tupla y lista pero que quede solo en la tupla1 con la funcion tuple()")
tupla1 = ([1,2,3],{"uno":1,"dos":2},(3,2))
lista = [False,85,'Hola']
print("Tupla1: ",tupla1)
print("Lista: ",lista)
tupla1 += tuple(lista)
print("Tupla1: ",tupla1)
print("\nUnir Listas, Diccionarios, Tuplas, Texto, Rango con la función zip() y mostrar el resultado como zip")
nombre = ("Andrés","Mary","Samuel")
edad = [43,46,5]
print("Nombres: ",nombre)
print("Edades: ",edad)
tupla = zip(nombre,edad)
print("Tupla: ",tupla)
print("\nUnir Listas, Diccionarios, Tuplas, Texto, Rango con la función zip() y mostrar el resultado como valores")
nombre = ("Andrés","Mary","Samuel")
edad = [43,46,5]
print("Nombres: ",nombre)
print("Edades: ",edad)
tupla = tuple(zip(nombre,edad))
print("Tupla: ",tupla)